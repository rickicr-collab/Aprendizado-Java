MÉTODOS MAP;

HASHMAP E LINKEDMAP:
 ** HASHMAP ** / ** LINKEDHASHMAP **
 - ATRIBUTOS NECESSÁRIOS PARA SE TRABALHAR COM INTERFACE MAP <KEY,VALUE>.
 - A ORDEM NÃO PODE SER GARANTIDA.
 - NÃO PODE EXISTIR CHAVES DUPLICADAS.
 - PARA SE ITERAR VOCÊ PODE SE TRABALHAR COM UM FOR.
 - NO MAP NÃO PODE SER DUPLICADAS E SE HOUVER VALORES IGUAIS UM DELES SERÁ SUBSTITUIDO.
 - PARA SE TRABALHAR COM AMBOS OS VALORES É NECESSÁRIO SE TRABALHAR COM UMA SUBINTERFACE CHAMADA ENTRY.
 
 OBS: NO LINKEDHASHMAP É MANTIDA A ORDEM ORIGINAL DE INSERÇÃO.
 
 OBS: É POSSIVEL ADICIONAR VARIOS MAP A OUTROS MAPS NÃO HA LIMITES PARA ESSA FUNÇÃO NO ENTANTO DEVE SE 
 ATENTAR PARA O ESQUEMA E NÃO CONFUNDI A LOGICA E A CONSTRUÇÃO DOS VALORES DENTRO DOS MAPS CRIADOS.
 
 FUNÇÕES UTEIS:
 REMOVE(); - REMOVE O OBJETO DENTRO DO MAP.
 REPLACE(); - SERVE PARA SUBSTITUIR OBEJTOS OOR OUTROS E RETORNA UM VALOR BOOLEANO PARA A OPERAÇÃO.
 CONTAINSKEY(); - SERVE PARA VERIFICAR SE AQUELA CHAVE EXISTE DENTRO DO MAP / DICIONARIO.
 CONTAISNVALUE(); - SERVE PARA VERIFICAR SE AQUELE VALOR EXISTE DENTRO DO MAP / DICIONÁRIO.
 
 OBSERVAÇÕES MÉTODO TREEMAP:
 - AO UTILIZAR O MÉTODO TREEMAP É NECESSÁRIO UTILIZAR UMA CLASSE QUE UTILIZAR A INTERFACE COMPARABLE (EX: STRING)
  NA CHAVE NA HORA DA INSTANCIA DO MÉTODO MAP CASO CONTRARIO VOCE IRA GERAR UM ERRO EM TEMPO DE EXECUCÃO COM EXCEPTION
  CLASSCASTEXCEPTION.
 
 **METODOS UTEIS**
  - HEADMAP(); ELE RETORNA INFORMACOES SOBRE AS CHAVES MENORES QUE O VALOR QUE FOI PASSADO COMO PARAMETRO O MESMO TAMBEM POSSUI
  UM PARAMETRO BOOLEANO QUE POR PADRÃO VEM FALSE POIS O MÉTODO NÃO INCLUE A CHAVE PARAMETRO A SER EXIBIDA NO MÉTODO AO INFORMAR
  TRUE A CHAVE PADRAO VAI SER EXIBIDA NO FINAL MOSTRANDO A ORDEM DO MENOR CHAVE PARA A MAIOR COM A ULTIMA SENDO A CHAVE PARAMETRO.
  - DESCENDINGMAP(); ELE RETORNA A ORDEM REVERSA DO MAP ORIGINAL.
  - ASCENDINGMAP(); ELE MOSTRA A FORMA ORDENADA DE UM MAP REVERSO.
 
 
 


